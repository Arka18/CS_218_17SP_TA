;  CS 218 - Assignment 9
;  Functions Template.

; ============================================================================
;  Write assembly language functions.

;  * Function rdTriNum() to read an unsigned tridecimal number
;    from the user (STDIN), perform error checking and ASCII to
;    integer conversion.

;  * Function selectionSort() sorts the numbers into descending
;    order (large to small).  Uses the selection sort algorithm
;    (from asst #7).

;  * Function listStats() finds the minimum, median, and maximum, for a
;    list of numbers.  Note, for an odd number of items, the median value
;    is defined as the middle value.  For an even number of values, it is
;    the integer average of the two middle values.

;  * Function estListMedian() computes and returns the estimated median
;    of a list of unsorted numbers.

;  * Function listAverage() computes and returns the average of
;    a list of numbers.

;  * Function betaValue() finds and returns the B (beta) value of a list
;    of numbers.  The summation for the a (alpha) value must be performed
;    as a quad-word.

; ============================================================================

section	.data

; -----
;  Define standard constants.

TRUE		equ	1
FALSE		equ	0

EXIT_SUCCESS	equ	0			; Successful operation

STDIN		equ	0			; standard input
STDOUT		equ	1			; standard output
STDERR		equ	2			; standard error

SYS_read	equ	0			; system call code for read
SYS_write	equ	1			; system call code for write
SYS_open	equ	2			; system call code for file open
SYS_close	equ	3			; system call code for file close
SYS_fork	equ	57			; system call code for fork
SYS_exit	equ	60			; system call code for terminate
SYS_creat	equ	85			; system call code for file open/create
SYS_time	equ	201			; system call code for get time

LF		equ	10
SPACE		equ	" "
NULL		equ	0
ESC		equ	27

; -----
;  Define program specific constants.

SUCCESS		equ	0
NOSUCCESS	equ	1
OVERMAX		equ	2
INPUTOVERFLOW	equ	3
ENDOFINPUT	equ	4

MAXNUM		equ	100000
BUFFSIZE	equ	51			; 50 chars plus NULL

; -----
;  NO static local variables allowed...


; ============================================================================

section	.text

; ********************************************************************
;  Read an unsigned ASCII tridecimal number from the user.
;  Perform appropriate error checking and, if OK,
;  convert to integer.

; -----
;  HLL Call:
;	bool = rdTriNum(&numberRead, promptStr);

;  Arguments Passed:
;	numberRead, addr - rdi
;	promptStr, addr - rsi

;  Returns:
;	status code
;	number read (via reference)


;	YOUR CODE GOES HERE



; ********************************************************************
;  Selection sort function.
;	Note, must update the selection sort algorithm to sort
;	in asending order.

; -----
;  HLL Call:
;	selectionSort(list, len)

;  Arguments Passed:
;	- list, addr
;	- length, value

;  Returns:
;	sorted list (list passed by reference)


;	YOUR CODE GOES HERE



; ********************************************************************
;  Find the minimum, median, and maximum for a list of integers

;  Note, for an odd number of items, the median value is defined as
;  the middle value.  For an even number of values, it is the integer
;  average of the two middle values.

;  Note, assumes the list is already sorted.

; -----
;  HLL Call:
;	listStats(list, len, estMed, &min, &med,
;					&max, &ave, &pctErr)

;  Arguments Passed:
;	- list, addr
;	- length, value
;	- est median, value
;	- minimum, addr
;	- median, addr
;	- maximum, addr
;	- average, addr
;	- percent err, addr

;  Returns:
;	minimum, median, maximum, average, and percent error
;	via pass-by-reference


;	YOUR CODE GOES HERE



; ********************************************************************
;  Function to calculate the estimated median of an unsorted list.

; -----
;  Call:
;	ans = listEstMedian(lst, len)

;  Arguments Passed:
;	- list, address
;	- length, value

;  Returns:
;	est median (in eax)


;	YOUR CODE GOES HERE



; ********************************************************************
;  Function to calculate the average of a list.

; -----
;  Call:
;	ans = lstAverage(lst, len)

;  Arguments Passed:
;	1) list, address - rdi
;	1) length, value - rsi

;  Returns:
;	average (in eax)


;	YOUR CODE GOES HERE


; ********************************************************************
;  Function to calculate the beta value for a list of numbers.

; -----
;  HLL Call:
;	b = betaValue(list, len)

;  Arguments Passed:
;	- list, addr
;	- length, value

;  Returns:
;	beta value (in eax)


;	YOUR CODE GOES HERE



; ********************************************************************
;  Generic function to display a string to the screen.
;  String must be NULL terminated.

;  Algorithm:
;	Count characters in string (excluding NULL)
;	Use syscall to output characters

; -----
;  HLL Call:
;	printString(stringAddr);

;  Arguments:
;	1) address, string
;  Returns:
;	nothing

global	printString
printString:

; -----
;  Count characters to write.

	mov	rdx, 0
strCountLoop:
	cmp	byte [rdi+rdx], NULL
	je	strCountLoopDone
	inc	rdx
	jmp	strCountLoop
strCountLoopDone:
	cmp	rdx, 0
	je	printStringDone

; -----
;  Call OS to output string.

	mov	rax, SYS_write			; system code for write()
	mov	rsi, rdi			; address of char to write
	mov	rdi, STDOUT			; file descriptor for std in
						; rdx=count to write, set above
	syscall					; system call

; -----
;  String printed, return to calling routine.

printStringDone:
	ret

; ******************************************************************

